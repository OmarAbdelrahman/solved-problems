#include <bits/stdc++.h>
using namespace std;

class PublicTransit {
public:
	int solve(int a, int b, int x, int y, int i, int j, int R, int C) {
		vector<vector<bool>> visited(R, vector<bool>(C, false));
		vector<vector<int>> d(R, vector<int>(C, numeric_limits<int>::max() >> 1));
		d[i][j] = 0;
		
		int result = 0;
		queue<tuple<int, int>> q;
		for (q.push(make_tuple(i, j)); !q.empty(); q.pop()) {
			const tuple<int, int> t = q.front();
			const int nx = get<0>(t);
			const int ny = get<1>(t);

			if (visited[nx][ny]) {
				continue;
			}
			visited[nx][ny] = true;

			result = max(result, d[nx][ny]);
			if (nx == a && ny == b) {
				if (d[x][y] > d[nx][ny]) {
					d[x][y] = d[nx][ny];
					q.push(make_tuple(x, y));
				}
			}
			if (nx == x && ny == y) {
				if (d[a][b] > d[nx][ny]) {
					d[a][b] = d[nx][ny];
					q.push(make_tuple(a, b));
				}
			}
			for (int xx = -1; xx <= 1; ++xx) {
				for (int yy = -1; yy <= 1; ++yy) {
					if ((xx == 0) ^ (yy == 0)) {
						const int rx = nx + xx;
						const int ry = ny + yy;
						if (rx < 0 || rx >= R || ry < 0 || ry >= C) {
							continue;
						}
						if (d[rx][ry] > d[nx][ny] + 1) {
							d[rx][ry] = d[nx][ny] + 1;
							q.push(make_tuple(rx, ry));
						}
					}
				}
			}
		}
		return result;
	}

	int minimumLongestDistance(int R, int C) {
		int result = numeric_limits<int>::max();
		for (int a = 0; a < R; ++a) {
			for (int b = 0; b < C; ++b) {
				for (int x = 0; x < R; ++x) {
					for (int y = 0; y < C; ++y) {
						int longestDistance = numeric_limits<int>::min();
						for (int i = 0; i < R; ++i) {
							for (int j = 0; j < C; ++j) {
								longestDistance = max(longestDistance, solve(a, b, x, y, i, j, R, C));
							}
						}
						result = min(result, longestDistance);
					}
				}
			}
		}
		return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	PublicTransit *obj;
	int answer;
	obj = new PublicTransit();
	clock_t startTime = clock();
	answer = obj->minimumLongestDistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 3;
	p2 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
