#include <bits/stdc++.h>
using namespace std;

class SortishDiv2 {
public:
  int count_sortedness(const vector<int>& v) {
    const int n = v.size();
    int result = 0;
    for (int i = 0; i < n; ++i)
      for (int j = i + 1; j < n; ++j) {
      	if (v[i] == 0 || v[j] == 0)
      	  continue;
      	if (v[i] < v[j]) ++result;
      }
    return result;
  }

  int ways(int sortedness, vector<int> seq) {
    const int n = seq.size();
    const int mod = (n * (n - 1)) / 2;

    if (sortedness > mod)
      return 0;
    if (count_sortedness(seq) > sortedness)
      return 0;

    vector<bool> visited(n + 1, false);
    for (int s : seq) if (s != 0) visited[s] = true;

    vector<int> missing;
    for (int i = 1; i < visited.size(); ++i)
      if (!visited[i])
        missing.push_back(i);

    int result = 0;
    do {
      vector<int> cur_seq = seq;

      int index = 0;
      for (int& s : cur_seq) if (s == 0) s = missing[index++];

      if (count_sortedness(cur_seq) == sortedness)
        ++result;
    } while (next_permutation(missing.begin(), missing.end()));

    return result;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << p0 << "," << "{";
  for (int i = 0; int(p1.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p1[i];
  }
  cout << "}";
  cout << "]" << endl;
  SortishDiv2 *obj;
  int answer;
  obj = new SortishDiv2();
  clock_t startTime = clock();
  answer = obj->ways(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  int p0;
  vector <int> p1;
  int p2;
	
  {
    // ----- test 0 -----
    p0 = 5;
    int t1[] = {4,0,0,2,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    p0 = 4;
    int t1[] = {0,0,0,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 5;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    p0 = 2;
    int t1[] = {1,3,2};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 1;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    p0 = 2;
    int t1[] = {1,2,0,5,0,0};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2 = 0;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }

  {
    p0=0;
    int t1[] = {0,1};
    p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
    p2=1;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
