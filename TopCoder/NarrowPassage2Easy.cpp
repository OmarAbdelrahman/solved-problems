#include <bits/stdc++.h>
using namespace std;

class NarrowPassage2Easy {
public:
  bool can_reach(const vector<int>& a, const vector<int>& b, const int msize) {
    for (int i = 0; i < a.size(); ++i)
      for (int j = i + 1; j < a.size(); ++j)
        if (a[i] > a[j] && b[a[i]] + b[a[j]] > msize)
          return false;
    return true;
  }

  int count(vector<int> size, int maxSizeSum) {
    vector<int> index;
    for (int i = 0; i < size.size(); ++i)
      index.push_back(i);

    int result = 0;
    do {
      if (can_reach(index, size, maxSizeSum))
        ++result;
    } while (next_permutation(index.begin(), index.end()));
    return result;
  }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
  cout << "Test " << testNum << ": [" << "{";
  for (int i = 0; int(p0.size()) > i; ++i) {
    if (i > 0) {
      cout << ",";
    }
    cout << p0[i];
  }
  cout << "}" << "," << p1;
  cout << "]" << endl;
  NarrowPassage2Easy *obj;
  int answer;
  obj = new NarrowPassage2Easy();
  clock_t startTime = clock();
  answer = obj->count(p0, p1);
  clock_t endTime = clock();
  delete obj;
  bool res;
  res = true;
  cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
  if (hasAnswer) {
    cout << "Desired answer:" << endl;
    cout << "\t" << p2 << endl;
  }
  cout << "Your answer:" << endl;
  cout << "\t" << answer << endl;
  if (hasAnswer) {
    res = answer == p2;
  }
  if (!res) {
    cout << "DOESN'T MATCH!!!!" << endl;
  } else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
    cout << "FAIL the timeout" << endl;
    res = false;
  } else if (hasAnswer) {
    cout << "Match :-)" << endl;
  } else {
    cout << "OK, but is it right?" << endl;
  }
  cout << "" << endl;
  return res;
}
int main() {
  bool all_right;
  all_right = true;
	
  vector <int> p0;
  int p1;
  int p2;
	
  {
    // ----- test 0 -----
    int t0[] = {1,2,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 3;
    p2 = 2;
    all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 1 -----
    int t0[] = {1,2,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1000;
    p2 = 6;
    all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 2 -----
    int t0[] = {1,2,3};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 4;
    p2 = 3;
    all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 3 -----
    int t0[] = {1,1,1,1,1,1};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 2;
    p2 = 720;
    all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 4 -----
    int t0[] = {2,4,6,1,3,5};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 8;
    p2 = 60;
    all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  {
    // ----- test 5 -----
    int t0[] = {1000};
    p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
    p1 = 1000;
    p2 = 1;
    all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
    // ------------------
  }
	
  if (all_right) {
    cout << "You're a stud (at least on the example cases)!" << endl;
  } else {
    cout << "Some of the test cases had errors." << endl;
  }
  return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
